---
import { type CollectionEntry, getCollection } from "astro:content";
import Layout from "../../layouts/Layout.astro";
import Footer from "../../components/Footer.astro";
import FormattedDate from "../../components/FormattedDate.astro";
import { Image } from "astro:assets";

export async function getStaticPaths() {
  const posts = await getCollection("texts");
  return posts.map((post) => ({
    params: { type: post.data.type, slug: post.slug },
    props: post,
  }));
}

type Props = CollectionEntry<"texts">;

const post = Astro.props;
const {
  title,
  type,
  heroImage,
  pubDate,
  editDate,
  edition,
  related = [],
  color,
} = post.data;
const { Content } = await post.render();

let typeTitle = "";
if (type === "lagrimas") {
  typeTitle = "Lágrimas de Siddartha";
} else if (type === "colores") {
  typeTitle = "En las luces de colores";
} else if (type === "still") {
  typeTitle = "Still Prefer Sentir";
} else {
  typeTitle = type;
}

// Obtener colección de textos
const allPosts = await getCollection("texts");

// Filtrar los posts relacionados
const relatedPosts = related
  .map((slug: string) => allPosts.find((post) => post.slug === slug))
  .filter(Boolean); // Elimina los valores `undefined`
---

<Layout title={title} bg={color}>
  <article
    class="flex flex-col justify-center w-full"
    style={`background-color: ${color}`}
  >
    <!-- Cover -->
    <div class="relative">
      <!-- Image -->
      <img class="w-screen" src={heroImage} alt="" />
      <div
        class="w-full absolute bottom-0 h-72"
        style={color
          ? `background: linear-gradient(to bottom, ${color}00, ${color}FF);`
          : ""}
      >
        <!-- Gradient -->
      </div>
    </div>

    <!-- Title -->
    <div class="flex flex-col mx-6 pb-2 border-b-2 border-white/50">
      <h3 class="text-2xl capitalize">
        {typeTitle}
      </h3>
      <h1 class="text-4xl font-bold">
        {title}
      </h1>
      <div class="flex justify-between items-end text-lg">
        <div class="flex items-center gap-1">
          <!-- <i class="ti ti-pencil"></i> -->
          <FormattedDate date={editDate} format="short" />
        </div>
        <!-- <button class="rounded-full px-3 py-1 bg-[#fff5]">Compartir</button> -->

        <!-- <button
          class="relative inline-flex items-center gap-2 rounded-full text-sm transition focus:outline-none"
          aria-label="Compartir"
        >
          <span
            class="relative inline-flex items-center gap-2 px-4 py-2 rounded-full bg-white/6 backdrop-blur-sm border border-white/10"
          >
            Compatir
          </span>
        </button> -->
      </div>
    </div>

    <!-- Content -->
    <div class="mx-10 my-8 font-besley text-base">
      <Content />
    </div>

    <!-- Related Posts -->
    <div class="mx-6 flex flex-col gap-4">
      <h2 class="text-2xl font-bold">Textos relacionados</h2>
      <ul class="grid grid-cols-1 sm:grid-cols-4 gap-4">
        {
          relatedPosts.length > 0 ? (
            relatedPosts.map((post: any) => (
              <li class="w-full text-center">
                  <a href={`/${post.data.type}/${post.slug}/`} class="text-sm flex gap-4 items-start">
                      <img class="w-32 rounded-lg" src={post.data.heroImage} alt={post.data.title}/>
                  <div class="flex flex-col items-start text-left w-full">
                    <p class="date text-lg font-normal text-white">
                      <FormattedDate date={post.data.pubDate} format="long" />
                    </p>
                    <h2 class="title text-2xl w-full font-semibold text-white border-b-2 pb-2 mb-2 border-white font-bebas">
                      {post.data.title}
                    </h2>
                  </div>
                </a>
              </li>
            ))
          ) : (
            <p class="font-normal">No hay textos relacionados.</p>
          )
        }
      </ul>
    </div>
  </article>
</Layout>
